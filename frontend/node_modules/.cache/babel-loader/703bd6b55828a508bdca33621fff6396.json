{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\ecommerce\\\\frontend\\\\src\\\\screens\\\\EditUserScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Form, Button } from 'react-bootstrap';\nimport { useDispactch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport FormContainer from '../components/FormContainer';\nimport { getUserDetails } from '../actions/userActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditUserScreen(_ref) {\n  _s();\n\n  let {\n    match,\n    history\n  } = _ref;\n  const userId = match.params.id;\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [isAdmin, setIsAdmin] = useState(false);\n  const dispatch = useDispactch();\n  const userDetails = useSelector(state => state.userDetails);\n  const {\n    error,\n    loading,\n    user\n  } = userDetails;\n  useEffect(() => {\n    if (!user.name || !user._id !== Number(userId)) {\n      dispatch(getUserDetails(userId));\n    } else {\n      setName(user.Name);\n      set;\n    }\n  }, []);\n\n  const submitHandler = e => {\n    e.preventDefault();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin/userlist\",\n      children: \"Go Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(FormContainer, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 25\n      }, this) : error ? /*#__PURE__*/_jsxDEV(Message, {\n        variant: \"danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 48\n      }, this) : /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"name\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"name\",\n            placeholder: \"Enter Name\",\n            value: name,\n            onChange: e => setName(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"email\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Email Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"email\",\n            placeholder: \"Enter Email\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"isadmin\",\n          children: /*#__PURE__*/_jsxDEV(Form.Check, {\n            type: \"checkbox\",\n            label: \"Is Admin\",\n            checked: isAdmin,\n            onChange: e => setIsAdmin(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          variant: \"primary\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 7\n  }, this);\n}\n\n_s(EditUserScreen, \"7hGgQRSexN5Cz0QOINVhbbM52q4=\", false, function () {\n  return [useDispactch, useSelector];\n});\n\n_c = EditUserScreen;\nexport default EditUserScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditUserScreen\");","map":{"version":3,"sources":["C:/Users/HP/Desktop/ecommerce/frontend/src/screens/EditUserScreen.js"],"names":["React","useState","useEffect","Link","Form","Button","useDispactch","useSelector","Message","Loader","FormContainer","getUserDetails","EditUserScreen","match","history","userId","params","id","name","setName","email","setEmail","isAdmin","setIsAdmin","dispatch","userDetails","state","error","loading","user","_id","Number","Name","set","submitHandler","e","preventDefault","target","value","checked"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispactch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport  Loader from '../components/Loader'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { getUserDetails } from '../actions/userActions'\r\n\r\n\r\nfunction EditUserScreen({match, history}) {\r\n\r\n    const userId = match.params.id\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n\r\n    const dispatch = useDispactch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const {error, loading, user} = userDetails\r\n\r\n    useEffect(() =>{\r\n        if (!user.name || !user._id !== Number(userId)){\r\n            dispatch(getUserDetails(userId))\r\n        }else{\r\n            setName(user.Name)\r\n            set\r\n        }\r\n  \r\n }, [])\r\n\r\n    const submitHandler = (e) =>{\r\n        e.preventDefault()\r\n \r\n    }\r\n\r\n  return (\r\n      <div>\r\n         <Link to='/admin/userlist'>\r\n            Go Back\r\n        </Link>\r\n\r\n        <FormContainer>\r\n            <h1>Edit</h1>\r\n            {loading ? (<Loader />) : error ? (<Message variant='danger'>{error}</Message>) : (\r\n                <Form onSubmit={submitHandler}>\r\n\r\n                <Form.Group controlId='name'>\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control\r\n                            type = 'name'\r\n                            placeholder = 'Enter Name'\r\n                            value = {name}\r\n                            onChange = {(e) => setName(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='email'>\r\n                        <Form.Label>Email Address</Form.Label>\r\n                        <Form.Control\r\n                            type = 'email'\r\n                            placeholder = 'Enter Email'\r\n                            value = {email}\r\n                            onChange = {(e) => setEmail(e.target.value)}\r\n                        >\r\n                        </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='isadmin'>\r\n                        <Form.Check\r\n                            type = 'checkbox'\r\n                            label = 'Is Admin'\r\n                            checked = {isAdmin}\r\n                            onChange = {(e) => setIsAdmin(e.target.checked)}\r\n                        >\r\n                        </Form.Check>\r\n                </Form.Group>\r\n\r\n                <Button type='submit' variant='primary'>\r\n                    Update\r\n                </Button>\r\n\r\n            </Form>\r\n\r\n            )}\r\n            \r\n        </FormContainer>\r\n      </div>\r\n   \r\n  )\r\n}\r\n\r\nexport default EditUserScreen"]},"metadata":{},"sourceType":"module"}